/// @generated by the sqlc-gen-rust on sqlc-generate using sqlc.yaml
/// DO NOT EDIT.
use postgres::{Error, Row};
const COUNT_PILOTS: &str = r#"SELECT COUNT(*) FROM pilots"#;
#[derive(Clone, Debug, sqlc_derive::FromPostgresRow, PartialEq)]
pub(crate) struct CountPilotsRow {
    pub count: i64,
}
const LIST_PILOTS: &str = r#"SELECT id, name FROM pilots LIMIT 5"#;
#[derive(Clone, Debug, sqlc_derive::FromPostgresRow, PartialEq)]
pub(crate) struct ListPilotsRow {
    pub id: i32,
    pub name: String,
}
const DELETE_PILOT: &str = r#"DELETE FROM pilots WHERE id = $1"#;
#[derive(Clone, Debug, sqlc_derive::FromPostgresRow, PartialEq)]
pub(crate) struct DeletePilotParams {
    pub id: i32,
}
pub struct Queries {
    client: postgres::Client,
}
impl Queries {
    pub fn new(client: postgres::Client) -> Self {
        Self { client }
    }
    pub(crate) fn count_pilots(&mut self) -> anyhow::Result<CountPilotsRow> {
        let row = self.client.query_one(COUNT_PILOTS, &[])?;
        Ok(sqlc_core::FromPostgresRow::from_row(&row)?)
    }
    pub(crate) fn list_pilots(&mut self) -> anyhow::Result<Vec<ListPilotsRow>> {
        let rows = self.client.query(LIST_PILOTS, &[])?;
        let mut result: Vec<ListPilotsRow> = vec![];
        for row in rows {
            result.push(sqlc_core::FromPostgresRow::from_row(&row)?);
        }
        Ok(result)
    }
    pub(crate) fn delete_pilot(
        &mut self,
        params: DeletePilotParams,
    ) -> anyhow::Result<()> {
        self.client.execute(DELETE_PILOT, &[&params.id])?;
        Ok(())
    }
}
